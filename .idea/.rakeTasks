<?xml version="1.0" encoding="UTF-8"?>
<Settings><!--This file was automatically generated by Ruby plugin.
You are allowed to: 
1. Remove rake task
2. Add existing rake tasks
To add existing rake tasks automatically delete this file and reload the project.
--><RakeGroup description="" fullCmd="" taksId="rake"><RakeTask description="List versions of all Rails frameworks and the environment" fullCmd="about" taksId="about" /><RakeGroup description="" fullCmd="" taksId="assets"><RakeTask description="Remove old compiled assets" fullCmd="assets:clean[keep]" taksId="clean[keep]" /><RakeTask description="Remove compiled assets" fullCmd="assets:clobber" taksId="clobber" /><RakeTask description="Load asset compile environment" fullCmd="assets:environment" taksId="environment" /><RakeTask description="Compile all the assets named in config.assets.precompile" fullCmd="assets:precompile" taksId="precompile" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="autoprefixer"><RakeTask description="Show selected browsers and prefixed CSS properties and values" fullCmd="autoprefixer:info" taksId="info" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="bourbon"><RakeTask description="Move files to the Rails assets directory" fullCmd="bourbon:install[sass_path]" taksId="install[sass_path]" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="cache_digests"><RakeTask description="Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)" fullCmd="cache_digests:dependencies" taksId="dependencies" /><RakeTask description="Lookup nested dependencies for TEMPLATE (like messages/show or comments/_comment.html)" fullCmd="cache_digests:nested_dependencies" taksId="nested_dependencies" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="db"><RakeTask description="Create the database from DATABASE_URL or config/database.yml for the current Rails.env (use db:create:all to create all dbs in the config)" fullCmd="db:create" taksId="create" /><RakeTask description="Drops the database using DATABASE_URL or the current Rails.env (use db:drop:all to drop all databases)" fullCmd="db:drop" taksId="drop" /><RakeGroup description="" fullCmd="" taksId="fixtures"><RakeTask description="Load fixtures into the current environment's database" fullCmd="db:fixtures:load" taksId="load" /></RakeGroup><RakeTask description="Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog)" fullCmd="db:migrate" taksId="migrate" /><RakeGroup description="" fullCmd="" taksId="migrate"><RakeTask description="Display status of migrations" fullCmd="db:migrate:status" taksId="status" /></RakeGroup><RakeTask description="Rolls the schema back to the previous version (specify steps w/ STEP=n)" fullCmd="db:rollback" taksId="rollback" /><RakeGroup description="" fullCmd="" taksId="schema"><RakeGroup description="" fullCmd="" taksId="cache"><RakeTask description="Clear a db/schema_cache.dump file" fullCmd="db:schema:cache:clear" taksId="clear" /><RakeTask description="Create a db/schema_cache.dump file" fullCmd="db:schema:cache:dump" taksId="dump" /></RakeGroup><RakeTask description="Create a db/schema.rb file that can be portably used against any DB supported by AR" fullCmd="db:schema:dump" taksId="dump" /><RakeTask description="Load a schema.rb file into the database" fullCmd="db:schema:load" taksId="load" /></RakeGroup><RakeTask description="Load the seed data from db/seeds.rb" fullCmd="db:seed" taksId="seed" /><RakeTask description="Create the database, load the schema, and initialize with the seed data (use db:reset to also drop the db first)" fullCmd="db:setup" taksId="setup" /><RakeGroup description="" fullCmd="" taksId="structure"><RakeTask description="Dump the database structure to db/structure.sql" fullCmd="db:structure:dump" taksId="dump" /></RakeGroup><RakeTask description="Retrieves the current schema version number" fullCmd="db:version" taksId="version" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="doc"><RakeTask description="Generate docs for the app -- also available doc:rails, doc:guides (options: TEMPLATE=/rdoc-template.rb, TITLE=&quot;Custom Title&quot;)" fullCmd="doc:app" taksId="app" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="fofa"><RakeTask description="Precompile assets" fullCmd="fofa:precompile" taksId="precompile" /><RakeTask description="restart all" fullCmd="fofa:restart_all" taksId="restart_all" /><RakeTask description="Zero-downtime restart of Unicorn" fullCmd="fofa:restart_unicorn" taksId="restart_unicorn" /><RakeTask description="Restart running workers" fullCmd="fofa:restart_workers" taksId="restart_workers" /><RakeTask description="Show running workers" fullCmd="fofa:show_workers" taksId="show_workers" /><RakeTask description="start all" fullCmd="fofa:start_all" taksId="start_all" /><RakeTask description="Start db link crawler" fullCmd="fofa:start_dblinkcrawler" taksId="start_dblinkcrawler" /><RakeTask description="Start unicorn" fullCmd="fofa:start_unicorn" taksId="start_unicorn" /><RakeTask description="Start workers (5 process, can set by WCNT environment; WGETLINK for crawler)" fullCmd="fofa:start_workers" taksId="start_workers" /><RakeTask description="stop all" fullCmd="fofa:stop_all" taksId="stop_all" /><RakeTask description="Stop unicorn" fullCmd="fofa:stop_unicorn" taksId="stop_unicorn" /><RakeTask description="Quit running workers" fullCmd="fofa:stop_workers" taksId="stop_workers" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="highcharts"><RakeTask description="Update highcharts.js from latest Builds on Highcharts codebase: http://code.highcharts.com/" fullCmd="highcharts:update" taksId="update" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="log"><RakeTask description="Truncates all *.log files in log/ to zero bytes (specify which logs with LOGS=test,development)" fullCmd="log:clear" taksId="clear" /></RakeGroup><RakeTask description="Prints out your Rack middleware stack" fullCmd="middleware" taksId="middleware" /><RakeTask description="Enumerate all annotations (use notes:optimize, :fixme, :todo for focus)" fullCmd="notes" taksId="notes" /><RakeGroup description="" fullCmd="" taksId="notes"><RakeTask description="Enumerate a custom annotation, specify with ANNOTATION=CUSTOM" fullCmd="notes:custom" taksId="custom" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="paperclip"><RakeTask description="Cleans out invalid attachments" fullCmd="paperclip:clean" taksId="clean" /><RakeTask description="Refreshes both metadata and thumbnails" fullCmd="paperclip:refresh" taksId="refresh" /><RakeGroup description="" fullCmd="" taksId="refresh"><RakeTask description="Regenerates content_type/size metadata for a given CLASS (and optional ATTACHMENT)" fullCmd="paperclip:refresh:metadata" taksId="metadata" /><RakeTask description="Regenerates missing thumbnail styles for all classes using Paperclip" fullCmd="paperclip:refresh:missing_styles" taksId="missing_styles" /><RakeTask description="Regenerates thumbnails for a given CLASS (and optional ATTACHMENT and STYLES splitted by comma)" fullCmd="paperclip:refresh:thumbnails" taksId="thumbnails" /></RakeGroup></RakeGroup><RakeGroup description="" fullCmd="" taksId="rails"><RakeTask description="Applies the template supplied by LOCATION=(/path/to/template) or URL" fullCmd="rails:template" taksId="template" /><RakeTask description="Update configs and some other initially generated files (or use just update:configs, update:bin, or update:application_controller)" fullCmd="rails:update" taksId="update" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="resque"><RakeGroup description="" fullCmd="" taksId="failures"><RakeTask description="Sort the 'failed' queue for the redis_multi_queue failure backend" fullCmd="resque:failures:sort" taksId="sort" /></RakeGroup><RakeTask description="Start a Resque worker" fullCmd="resque:work" taksId="work" /><RakeTask description="Start multiple Resque workers" fullCmd="resque:workers" taksId="workers" /></RakeGroup><RakeTask description="Print out all defined routes in match order, with names" fullCmd="routes" taksId="routes" /><RakeTask description="Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)" fullCmd="secret" taksId="secret" /><RakeTask description="Report code statistics (KLOCs, etc) from the application" fullCmd="stats" taksId="stats" /><RakeTask description="Runs test:units, test:functionals, test:integration together" fullCmd="test" taksId="test" /><RakeGroup description="" fullCmd="" taksId="test"><RakeTask description="Run tests quickly by merging all types and not resetting db" fullCmd="test:all" taksId="all" /><RakeGroup description="" fullCmd="" taksId="all"><RakeTask description="Run tests quickly, but also reset db" fullCmd="test:all:db" taksId="db" /></RakeGroup><RakeTask description="Run tests for {:recent=&gt;[&quot;test:deprecated&quot;, &quot;test:prepare&quot;]} / Deprecated; Test recent changes" fullCmd="test:recent" taksId="recent" /><RakeTask description="Run tests for {:uncommitted=&gt;[&quot;test:deprecated&quot;, &quot;test:prepare&quot;]} / Deprecated; Test changes since last checkin (only Subversion and Git)" fullCmd="test:uncommitted" taksId="uncommitted" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="time"><RakeGroup description="" fullCmd="" taksId="zones"><RakeTask description="Displays all time zones, also available: time:zones:us, time:zones:local -- filter with OFFSET parameter, e.g., OFFSET=-6" fullCmd="time:zones:all" taksId="all" /></RakeGroup></RakeGroup><RakeGroup description="" fullCmd="" taksId="tmp"><RakeTask description="Clear session, cache, and socket files from tmp/ (narrow w/ tmp:sessions:clear, tmp:cache:clear, tmp:sockets:clear)" fullCmd="tmp:clear" taksId="clear" /><RakeTask description="Creates tmp directories for sessions, cache, sockets, and pids" fullCmd="tmp:create" taksId="create" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="ts"><RakeTask description="Clear out Sphinx files" fullCmd="ts:clear" taksId="clear" /><RakeTask description="Generate the Sphinx configuration file" fullCmd="ts:configure" taksId="configure" /><RakeTask description="Generate fresh index files for real-time indices" fullCmd="ts:generate" taksId="generate" /><RakeTask description="Generate the Sphinx configuration file and process all indices" fullCmd="ts:index" taksId="index" /><RakeTask description="Stop Sphinx, index and then restart Sphinx" fullCmd="ts:rebuild" taksId="rebuild" /><RakeTask description="Stop Sphinx, clear files, reconfigure, start Sphinx, generate files" fullCmd="ts:regenerate" taksId="regenerate" /><RakeTask description="Restart the Sphinx daemon" fullCmd="ts:restart" taksId="restart" /><RakeTask description="Start the Sphinx daemon" fullCmd="ts:start" taksId="start" /><RakeTask description="Stop the Sphinx daemon" fullCmd="ts:stop" taksId="stop" /></RakeGroup></RakeGroup></Settings>
