<% content_for :title, '定向攻击演示'%>

<style type="text/css">

    .link_normal {
        stroke: #ccc;
    }

    .link_attack {
        stroke: #FF0000;
    }

    .nodetext {
        pointer-events: none;
        font: 10px sans-serif;
        text-shadow: 0 1px 3px white;
    }
    .topheader{border-bottom:1px solid #ccc; margin:0 auto; margin-bottom:20px; text-indent:10px;}
</style>


<div class="page-header" id="banner">
  <div class="row">
    <div class="col-lg-3">
    </div>
    <div class="col-lg-6">
      <h1 style='text-align: center;'>定向攻击演示</h1>

          <div class="input-group">
            <input type="text" class="form-control" id="domain" name="domain" placeholder="请输入根域名，如：fofa.so" <%if @domain%>value="<%=@domain%>"<%end%>>
	      <span class="input-group-btn">
	        <button class="btn btn-info" type="submit"  id="loading-example-btn" data-loading-text="正在查询..."><i class="fa fa-search"></i> Show一下</button>
	      </span>
          </div><!-- /input-group -->

      <p></p>



      <% unless current_user %>
          <div class="alert alert-success alert-dismissible ade in" role="alert">
            <button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">&times;</span><span class="sr-only">关闭</span></button>
                <%= link_to raw('<i class="fa fa-unlock"></i>')+'未登录状态下有最大200条记录的限制，登录后查询可解除限制。', new_user_session_path%>
          </div>
      <% end %>

    </div>
    <div class="col-lg-3">
    </div>
  </div>

</div>



    <div class="container">
      <div class="row">
        <div class="col-lg-1" style="padding: 8px" >
        </div>
        <div class="col-lg-10" style="padding: 8px" id="ajaxLog">
          <div style="overflow:auto; height:360px; width: 100%; border:1px solid #dce4ec" class="svg">
          </div>
          <div id="conversation"></div>
        </div>
        <div class="col-lg-1" style="padding: 8px" >
        </div>
      </div>
    </div>

<p><br/><br/></p>
<script type="text/javascript" src="http://libs.useso.com/js/d3/3.4.8/d3.min.js" charset="utf-8"></script>
<script>
    var g_domain = "";
    var g_maxnode = 2000;
    var vis;
    var statusText;
    var force;
    var nodes, links;
    var lasttime = (new Date()).valueOf();

    $(document).ready(function() {
        if(document.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#shape", "1.0")) {
            alert('not support HTML5!');
            return
        }

        g_domain = $('#domain').val();
        if(g_domain.length > 0) {
            $('#loading-example-btn').click();
        }
    });

    $('#loading-example-btn').click(function () {
        $('#loading-example-btn').html('处理中，请稍候……');
        init_d3();
    });

    function parse_line(line){
        return eval("("+line+")");
    }

    function whenfinished(line){
        console.log("finished : " + line);
        if(window.step == 0)
        {
            StartJob("taskaction=alldomainsfrom&domain="+window.g_last_domain, whenfinished, whenerror, whendata);
            window.step = 1;
        }
        //else if(window.step == 1)
        //{
        //    window.step = 2;
        //}
        else
        {
            process_finish_and_next(window.g_last_domain );
        }
    }
    function whenerror(line){
        console.log("error : " + line);
        process_finish_and_next(window.g_last_domain );
    }

    // type : domain,host,ip,port
    function whendata(datas){
        for (index = 0; index < datas.length; ++index) {
            if (datas[index]!='start dumping...' && datas[index]!='<<<finished>>>')
            {
                data = parse_line(datas[index]);
                //console.log("news incoming..."+data);
                if(data.to.type == 'test') {
                    //base64
                    data.to.value = Base64.decode(data.to.value);
                }
                addinfoall(data);
            }
        }

    }

    function init_d3() {
        var w = 900,
                h = 400;
        force = d3.layout.force().gravity(.5).distance(50)
            //.linkDistance(100)
                .charge(function(d) {
                    return d._children ? -d.size / 50 : -50;
                })
                .linkDistance(function(d) {
                    return 5 + Math.log(d.target.count + d.source.count)*3;
                })
            //.charge(-100)
                .size([w, h]);

        nodes = force.nodes();
        links = force.links();

        d3.select("div.svg").style('height', '400px');
        vis = d3.select("div.svg").append("svg:svg").attr("width", '100%').attr("height", '100%').attr("pointer-events", "all").append('svg:g').call(d3.behavior.zoom().on("zoom", redraw)).append('svg:g');
        vis.append('svg:rect').attr('width', '100%').attr('height', '100%').attr('fill', 'white');
        statusText = vis.append('svg:text');

        //绑定tick事件，进行坐标定位
        force.on("tick", function() {
            vis.selectAll("g.node").attr("transform", function(d) {
                return "translate(" + d.x + "," + d.y + ")";
            });

            vis.selectAll("line").attr("x1", function(d) {
                return d.source.x;
            }).attr("y1", function(d) {
                return d.source.y;
            }).attr("x2", function(d) {
                return d.target.x;
            }).attr("y2", function(d) {
                return d.target.y;
            });
        });

        g_domain = $('#domain').val();
        window.g_last_domain = g_domain;
        window.step = 0;
        StartJob("taskaction=gethosts&domain="+g_domain, whenfinished, whenerror, whendata);
    }

    function process_finish_and_next(data) {
        for(y = 0; y < nodes.length; y++) {
            if(nodes[y].id == data) {
                nodes[y].done = true;
                break;
            }
        }
        if(nodes.length >= g_maxnode) {
            logtitle('max node size is ' + g_maxnode + ', now stop!');
            for(y = 0; y < nodes.length; y++) {
                nodes[y].done = true;
            }
            return;
        }

        var not_done = false;
        for(y = 0; y < nodes.length; y++) {
            if(!nodes[y].done) {
                if( nodes[y].type == 'domain' ) {
                    console.log("getitems : " + nodes[y].id);
                    window.g_last_domain = nodes[y].id;
                    StartJob("taskaction=gethosts&domain="+nodes[y].id, whenfinished, whenerror, whendata)
                    not_done = true;
                    break;
                }
                else if( nodes[y].type == 'host' ) {
                    console.log("getitems : " + nodes[y].id);
                    window.g_last_domain = nodes[y].id;
                    StartJob("taskaction=getips&domain="+nodes[y].id, whenfinished, whenerror, whendata);
                    not_done = true;
                    break;
                }
                else
                {
                    nodes[y].done = true;
                }
            }

        }
        if(!not_done) {
            console.log("finish all!");
            $('#loading-example-btn').html('Show一下');
        }
    }

    function redraw() {
        //console.log("here", d3.event.translate, d3.event.scale);
        vis.attr("transform", "translate(" + d3.event.translate + ")" + " scale(" + d3.event.scale + ")");
        vis.selectAll("text.nodetext").text(getnodetext);
    }

    function getnodeinfo(d) {
        return d.id + " : " + d.type;
    }

    function getnodetext(d) {
        var text = "";
        if(d.count > 5 && d.type=='domain') text = d.id;
        else if(d.type=='ip' && d.ips.length > 5) text = d.id+" : "+ d.ips.length;
        return text;
    }

    function getnodefill(d) {
        if(d.type == 'host')
        {
            return "#6baed6";
        }
        else if(d.type == 'email')
        {
            return "#9e9ac8";
        }
        else if(d.type == 'ns')
        {
            return "#bdbdbd";
        }
        else if(d.type == 'domain')
        {
            return "#a1d99b";
        }
        else if(d.type == 'reg_name' || d.type == 'whois_reg_name')
        {
            return "#DC143C";
        }
        return "#FDAE6B";
    }

    function getnodestroke(d) {
        if(d.type == 'host')
        {
            return "#3182bd";
        }
        else if(d.type == 'email')
        {
            return "#756bb1";
        }
        else if(d.type == 'ns')
        {
            return "#969696";
        }
        else if(d.type == 'domain')
        {
            return "#74c476";
        }
        else if(d.type == 'reg_name' || d.type == 'whois_reg_name')
        {
            return "#B22222";
        }
        return "#FD8D3C";
    }

    function restart() {

        var link = vis.selectAll("line").data(links, function(d) {
            return d.source.id + "-" + d.target.id;
        });
        link.enter().insert("svg:line", "g.node").attr("class", "link_normal");
        link.exit().remove();
        link.style("stroke-width", "1px");

        var node = vis.selectAll("g.node").data(nodes, function(d) {
            return d.id;
        });
        var nodeEnter = node.enter().append("svg:g").attr("class", "node").call(force.drag);

        var cnode = nodeEnter.append("svg:circle").attr("class", "node").attr("stroke", getnodestroke).style("fill", getnodefill)

        nodeEnter.append("svg:text").attr("class", "nodetext").attr("dx", 12).attr("dy", ".35em").text(getnodetext);
        node.exit().remove();
        vis.selectAll("text.nodetext").text(getnodetext);
        vis.selectAll("circle").attr("r", function(d) {
            if (d.type=='ip')
                return  3 + Math.log(d.ips.length);
            else
                return 3 + Math.log(d.count);
        })
            //.attr("r", 3)
                .on('mouseover', function(d, i) {
                    d3.select(this).style('fill', getnodefill);
                    statusText.text(getnodeinfo(d)).attr("x", d.x - 20).attr("y", d.y - 20);
                }).on('mouseout', function(d, i) {
                    statusText.text('');
                    d3.select(this).style('fill', getnodefill);
                });

        force.start();
        //每次node和link数据变更都需要调用，进行重画
    }

    Array.prototype.unique = function (isStrict) {
        if (this.length < 2)
            return [this[0]] || [];
        var tempObj = {}, newArr = [];
        for (var i = 0; i < this.length; i++) {
            var v = this[i];
            var condition = isStrict ? (typeof tempObj[v] != typeof v) : false;
            if ((typeof tempObj[v] == "undefined") || condition) {
                tempObj[v] = v;
                newArr.push(v);
            }
        }
        return newArr;
    }

    // Add three nodes and three links.

    function addinfonode(data) {
        //if(data[4] == 'cc') return;
        var found = false;
        //found ip node
        var ipnode = {
            id: data.from,
            raw: {
                value: data.from,
                type: 'domain'
            },
            type: 'domain',
            done: false,
            count: 0,
            ips: []
        };
        for(y = 0; y < nodes.length; y++) {
            if(nodes[y].id == data.from) {
                ipnode = nodes[y];
                found = true;
                break;
            }
        }
        if(!found) {
            nodes.push(ipnode);
        }

        //found host node
        found = false;
        var hostnode = {
            id: data.to.value,
            type: data.to.type,
            raw: data.to,
            done: false,
            count: 0,
            ips: []
        };
        for(y = 0; y < nodes.length; y++) {
            if(nodes[y].id == data.to.value) {
                hostnode = nodes[y];
                found = true;
                break;
            }
        }
        if(!found) {
            nodes.push(hostnode);
        }

        if (hostnode.type=='ip') {
            found = false;
            for(y = 0; y < hostnode.ips.length; y++) {
                if(hostnode.ips[y] == data.to.ip) {
                    found = true;
                    break;
                }
            }
            if(!found) hostnode.ips.push(data.to.ip);
        }

        //found link
        found = false;
        var addlink = {
            source: ipnode,
            target: hostnode
        };
        for(y = 0; y < links.length; y++) {
            if((links[y].source.id == addlink.source.id && links[y].target.id == addlink.target.id) || (links[y].target.id == addlink.source.id && links[y].source.id == addlink.target.id)) {
                addlink = links[y];
                found = true;
                break;
            }
        }
        if(!found) {
            links.push(addlink);
            ipnode.count++;
            hostnode.count++;
        }

        $("#node_count").html(nodes.length);

        restart();
    }

    function logtitle(msg) {
        $('#title').html(msg);
    }

    function addinfoall(data) {
        if(data) {
            addinfonode(data);
            //$('#conversation').append(data.from + ' => ' + data.to.value + '<br>');
            //$('#conversation').stop().animate({
            //    scrollTop: $("#conversation")[0].scrollHeight
            //}, 200);
        }
    }


    /**
     *
     *  Base64 encode / decode
     *  http://www.webtoolkit.info/
     *
     **/

    var Base64 = {

        // private property
        _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",

        // public method for encoding
        encode: function(input) {
            var output = "";
            var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
            var i = 0;
            input = Base64._utf8_encode(input);

            while(i < input.length) {
                chr1 = input.charCodeAt(i++);
                chr2 = input.charCodeAt(i++);
                chr3 = input.charCodeAt(i++);
                enc1 = chr1 >> 2;
                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
                enc4 = chr3 & 63;

                if(isNaN(chr2)) {
                    enc3 = enc4 = 64;
                } else if(isNaN(chr3)) {
                    enc4 = 64;
                }
                output = output + this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) + this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);

            }

            return output;
        },
        // public method for decoding
        decode: function(input) {
            var output = "";
            var chr1, chr2, chr3;
            var enc1, enc2, enc3, enc4;
            var i = 0;
            input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

            while(i < input.length) {
                enc1 = this._keyStr.indexOf(input.charAt(i++));
                enc2 = this._keyStr.indexOf(input.charAt(i++));
                enc3 = this._keyStr.indexOf(input.charAt(i++));
                enc4 = this._keyStr.indexOf(input.charAt(i++));
                chr1 = (enc1 << 2) | (enc2 >> 4);
                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
                chr3 = ((enc3 & 3) << 6) | enc4;
                output = output + String.fromCharCode(chr1);

                if(enc3 != 64) {
                    output = output + String.fromCharCode(chr2);
                }
                if(enc4 != 64) {
                    output = output + String.fromCharCode(chr3);
                }

            }
            output = Base64._utf8_decode(output);

            return output;

        },
        // private method for UTF-8 encoding
        _utf8_encode: function(string) {
            string = string.replace(/\r\n/g, "\n");
            var utftext = "";

            for(var n = 0; n < string.length; n++) {

                var c = string.charCodeAt(n);

                if(c < 128) {
                    utftext += String.fromCharCode(c);
                } else if((c > 127) && (c < 2048)) {
                    utftext += String.fromCharCode((c >> 6) | 192);
                    utftext += String.fromCharCode((c & 63) | 128);
                } else {
                    utftext += String.fromCharCode((c >> 12) | 224);
                    utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                    utftext += String.fromCharCode((c & 63) | 128);
                }

            }

            return utftext;
        },
        // private method for UTF-8 decoding
        _utf8_decode: function(utftext) {
            var string = "";
            var i = 0;
            var c = c1 = c2 = 0;

            while(i < utftext.length) {
                c = utftext.charCodeAt(i);

                if(c < 128) {
                    string += String.fromCharCode(c);
                    i++;
                } else if((c > 191) && (c < 224)) {
                    c2 = utftext.charCodeAt(i + 1);
                    string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                    i += 2;
                } else {
                    c2 = utftext.charCodeAt(i + 1);
                    c3 = utftext.charCodeAt(i + 2);
                    string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                    i += 3;
                }

            }

            return string;
        }
    }





</script>

<%= javascript_include_tag params[:controller] %>